// AlgosInterview.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <algorithm>
#include <iostream>
#include <array>
using namespace std;

int removeDuplicates_1(int a[], int array_size)
{
	int i, j;

	j = 0;

	// Print old array...
	printf("\n\nOLD : ");
	for (i = 0; i < array_size; i++)
	{
		printf("[%d] ", a[i]);
	}

	// Remove the duplicates ...
	for (i = 1; i < array_size; i++)
	{
		int next = a[i];
		int prev = a[j];
		if (a[i] != a[j])
		{
			j++;
			a[j] = a[i]; // Move it to the front
		}
	}

	// The new array size..
	array_size = (j + 1);

	// Print new array...
	printf("\nNEW : ");
	for (i = 0; i< array_size; i++)
	{
		printf("[%d] ", a[i]);
	}
	printf("\n\n");

	// Return the new size...
	return(j + 1);
}


void kar(int a[], int size)
{
	int j = 0;
	

	cout << "old : ";
	for (size_t ii = 0; ii < size; ii++)
	{
		cout << a[ii] << " ";
	}
	cout << endl;

	for (int i = 0; i < size; i++)
	{
		if (a[i] != a[j])
		{
			j++;
			a[j] = a[i];
		}
	}
	size = j+1 ;
	cout << "New : ";
	for (size_t iii = 0; iii < size; ++iii)
	{
		cout << a[iii] << " ";
	}
	cout << endl;
}

void removeDuplicatesNoModify(int array[], int array_size)
{
	int i, last_seen_unique;

	if (array_size <= 1){ return; }

	last_seen_unique = array[0];

	printf("\n\nOld : ", array_size);

	for (i = 0; i < array_size; i++)
	{
		printf("[%2d] ", array[i]);
	}

	printf("\nNew : ", array_size);

	printf("[%2d] ", array[0]);
	for (i = 1; i < array_size; i++)
	{
		if (array[i] != last_seen_unique)
		{
			printf("[%2d] ", array[i]);
			last_seen_unique = array[i];
		}
	}

	printf("\n");
}

int _tmain(int argc, _TCHAR* argv[])
{
	int a[] = { 10, 20, 20,20, 30, 40, 50, 50, 55, 55, 60, 70, 80, 85, 85, 90,10,20,30,55, 92, 100 };
	int sizee = sizeof(a) / sizeof(a[0]);
	kar(a, sizee);
	//removeDuplicates_1(a, 18);
	//removeDuplicatesNoModify(a, sizee);

	const int size = 8;
	int array[size] = {2, 30, 50,50, 20,20, 10, 40 };

	// Step through each element of the array
	for (int startIndex = 0; startIndex < size; ++startIndex)
	{
		// smallestIndex is the index of the smallest element we've encountered so far.
		int smallestIndex = startIndex;

		// Look for smallest element remaining in the array (starting at startIndex+1)
		for (int currentIndex = startIndex + 1; currentIndex < size; ++currentIndex)
		{
			// If the current element is smaller than our previously found smallest
			if (array[currentIndex] < array[smallestIndex])
				// This is the new smallest number for this iteration
				smallestIndex = currentIndex;
		}

		// Swap our start element with our smallest element
		std::swap(array[startIndex], array[smallestIndex]);
	}

	// Now print our sorted array as proof it works
	for (int index = 0; index < size; ++index)
		std::cout << array[index] << ' ';

	getchar();
	return 0;
}

