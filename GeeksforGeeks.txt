// GeeksforGeeks.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>
using namespace std;
#include <math.h>

//double sqrt_own(double x) 
//{
//	if (x <= 0)
//		return 0;       // if negative number throw an exception?
//	int exp = 0;
//	x = frexp(x, &exp); // extract binary exponent from x
//	if (exp & 1) {      // we want exponent to be even
//		exp--;
//		x *= 2;
//	}
//	double y = (1 + x) / 2; // first approximation
//	double z = 0;
//	while (y != z) {    // yes, we CAN compare doubles here!
//		z = y;
//		y = (y + x / y) / 2;
//	}
//	return ldexp(y, exp / 2); // multiply answer by 2^(exp/2)
//}
//
//class A {
//public:
//	A(int ii = 0) : i(ii) {}
//	void show() 
//	{ 
//		cout << "i = " << i << endl; 
//	}
//private:
//	int i;
//};
//
//class B {
//public:
//	B(int xx) : x(xx) {}
//	operator A() const 
//	{ 
//		return A(x); 
//	}
//private:
//	int x;
//};
//
//void g(A a)
//{
//	a.show();
//}

//int main() {
//
//	double v = sqrt_own(6);
//		 
//	B b(10);
//	g(b);
//	g(20);
//	getchar();
//	return 0;
//}


class Base
{
public:
	// compiler "declares" constructor
};

class A
{
public:
	// User defined constructor
	A()
	{
		cout << "A Constructor" << endl;
	}

	// uninitialized
	int size;
};

class B : public A
{
	// compiler defines default constructor of B, and
	// inserts stub to call A constructor

	// compiler won't initialize any data of A
};

class C : public A
{
public:
	C()
	{
		// User defined default constructor of C
		// Compiler inserts stub to call A's construtor
		cout << "B Constructor" << endl;

		// compiler won't initialize any data of A
	}
};

class D
{
public:
	D()
	{
		// User defined default constructor ofD 
		// a - constructor to be called, compiler inserts
		// stub to call A constructor
		cout << "D Constructor" << endl;
		// compiler won't initialize any data of 'a'
	}

private:
	A a;
};

class Test
{
public:
	Test() { cout << "Constructor is executed\n"; }
	~Test() { cout << "Destructor is executed\n"; }
	friend void fun(Test t);
};
void fun(const Test t)
{
	cout << "Test start\n";
	Test();
	cout << "Test middle\n";
	t.~Test();
	cout << "Test end\n";
}

class Distance
{
private:
	int feet;             // 0 to infinite
	int inches;           // 0 to 12
public:
	// required constructors
	Distance(){
		feet = 0;
		inches = 0;
	}
	Distance(int f, int i){
		feet = f;
		inches = i;
	}
	Distance& operator=(const Distance &D)
	{
		if (this!= &D)
		{
			this->feet = D.feet;
			this->inches = D.inches;
		}
		return *this;
	}
	Distance & operator+( const Distance &d)
	{
		this->feet = this->feet+d.feet;
		this->inches = this->inches + d.inches;
		return *this;
	}
	friend Distance  operator+(int c, const Distance &d2)
	{
		Distance d1;
		d1.feet = d2.feet + c;
		d1.inches = d2.inches +c;
		return d1;
	}
	friend Distance  operator+(const Distance &d2, int c)
	{
		Distance d1;
		d1.feet = d2.feet + c;
		d1.inches = d2.inches + c;
		return d1;
	}
	/*void operator=(const Distance &D)
	{
		feet = D.feet;
		inches = D.inches;
	}*/
	// method to display distance
	void displayDistance()
	{
		cout << "F: " << feet << " I:" << inches << endl;
	}

};

int main()
{
	//Base base;
	//B b;
	//C c;
	//D d;
	//{
	//	cout << 1 << endl;
	//	Test(); //for these kind of things ctr and dstr is executed simultaneously
	//	cout << 2<< endl;
	//}
	//cout << 3 << endl;
	//Test t;
	//fun(t);
	Distance D1(11, 10), D2(13, 14);
	cout << "First Distance : ";
	D1.displayDistance();
	cout << "Second Distance :";
	D2.displayDistance();
	D1 =  2+D2;
	D1 =  D2+2;

	cout << "First Distance :";
	D1.displayDistance();

	return 0;
}

