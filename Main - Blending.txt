#include <GL\glew.h>
#include <GL\freeglut.h>
#include <stdio.h>
#include <math.h>

float vertex[] = { 0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
0.0f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f,
-0.5f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f };
GLuint triangleVBO;
GLuint triangleIndexVBO;

float vertex1[] = { 0.5f, 0.5f,0.0f,	0.0f,0.0f, 1.0f, 1.0f,
					-0.5f, 0.5f,0.0f,	0.0f, 0.0f, 1.0f, 1.0f,
					-0.5f, -0.5f,0.0f,	0.0f, 0.0f, 1.0f, 1.0f,
					0.5f, -0.5f,0.0f,	0.0f, 0.0f, 1.0f, 1.0f };

float newVertex[] = { 0.0f, 0.0f };
float originalVertex[] = { -1.0f, 0.0f };
GLubyte indices[] = { 2, 1, 0 };
GLubyte indices1[] = { 0, 1, 2, 3 };
float angle = 0.0f;
float scale = 1.0;
float zPos = 0.0f;

void keyboard(unsigned char c, int x, int y) {
	if (c == 'r') {
		//update the triangle VBO 
		glBindBuffer(GL_ARRAY_BUFFER, triangleVBO);
		glBufferSubData(GL_ARRAY_BUFFER, 12 * sizeof(float), 8, newVertex);
		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}
	else if (c == 'i'){
		glBindBuffer(GL_ARRAY_BUFFER, triangleVBO);
		glBufferSubData(GL_ARRAY_BUFFER, 12 * sizeof(float), 8, originalVertex);
		glBindBuffer(GL_ARRAY_BUFFER, 0);
	}

}

GLuint initIndexVBO(GLubyte* arr, int size) {
	GLuint id;
	glGenBuffers(1, &id);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, id);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, size, arr, GL_STATIC_DRAW);
	return id;
}

GLuint initVBO(float* arr, int size) {
	//generate ID for the VBO

	GLuint id;
	glGenBuffers(1, &id);

	if (id < 0) {
		printf("Unable to generate VBO ID");
		return -1;
	}

	//bind to the VBO
	glBindBuffer(GL_ARRAY_BUFFER, id);

	//copy vertex attribute data to the VBO
	glBufferData(GL_ARRAY_BUFFER, size, NULL, GL_STATIC_DRAW);

	float* memptr = (float*)glMapBuffer(GL_ARRAY_BUFFER, GL_READ_WRITE);
	memcpy(memptr, arr, size);
	glUnmapBuffer(GL_ARRAY_BUFFER);

	//unbind from the VBO
	glBindBuffer(GL_ARRAY_BUFFER, 0);

	return id;

}

void drawTriangle() {
	//enable sending position data of the vertex to the graphics pipeline
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);

	glBindBuffer(GL_ARRAY_BUFFER, triangleVBO);
	//tell opengl how the data is layed out in the array
	glVertexPointer(2, GL_FLOAT, 24, 0);

	//tell opengl how color data is layed out
	glColorPointer(4, GL_FLOAT, 24, (void*)8);

	//draw the primitive (this is the function which will trigger data transfer
	//	glDrawArrays(GL_TRIANGLES, 0, 3);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, triangleIndexVBO);
	glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_BYTE, 0);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);
}
void drawQuad() {
	//enable sending position data of the vertex to the graphics pipeline
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);

	//tell opengl how the data is layed out in the array
	glVertexPointer(3, GL_FLOAT, 28, vertex1);

	//tell opengl how color data is layed out
	glColorPointer(4, GL_FLOAT, 28, vertex1 + 3);

	//draw the primitive (this is the function which will trigger data transfer
	//	glDrawArrays(GL_TRIANGLES, 0, 3);
	glDrawElements(GL_QUADS, 4, GL_UNSIGNED_BYTE, indices1);

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);

}
void display() {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	//	gluLookAt(0.0,  0.0, zPos, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

	angle += 0.5;
	if (angle >= 360.0) angle = 0.0f;
	scale += 0.001;
	if (scale >= 2.0) scale = 1.0f;
	zPos += 0.01;

	//if(zPos >= 50.0) zPos = 0.0f;
	glPushMatrix();
	glTranslatef(0.0f, 0.0f, -2.0);
	drawTriangle();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(0.0f, 0.0f, -2.0);
	drawQuad();
	glPopMatrix();

	glutSwapBuffers();
}

void resize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//	glFrustum(-1.0, 1.0, -1.0, 1.0, 0.1, 100.0);
	gluPerspective(90, (float)w / (float)h, 0.1, 100.0);

}

void initGL() {
	//send the color_buffer clearing color
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClearDepth(1.0);
	glClearStencil(0.0);

	glEnable(GL_BLEND);
	//glBlendFunc(GL_ONE, GL_ONE);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	triangleVBO = initVBO(vertex, 18 * sizeof(float));
	triangleIndexVBO = initIndexVBO(indices, 3);
}


void timerFunc(int val) {
	display();

	glutTimerFunc(20, timerFunc, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);

	glutInitWindowSize(500, 500);
	glutCreateWindow("HelloGL");

	//initialize the glew library
	glewInit();


	const GLubyte* version = glGetString(GL_VERSION);
	printf("%s", version);

	const GLubyte* extensions = glGetString(GL_EXTENSIONS);
	printf("%s", extensions);

	//rendering context os created, can send opengl calls
	initGL();

	glutDisplayFunc(display);

	glutKeyboardFunc(keyboard);
	glutTimerFunc(20, timerFunc, 0);

	glutReshapeFunc(resize);
	//	glutIdleFunc(display);
	glutMainLoop();

	return 0;


}