#include <GL\glew.h>
#include <GL/freeglut.h>
#include <stdio.h>
#include <glm.hpp>
#include <gtc/matrix_transform.hpp>



float angle = 0.0f;

void resize(int w , int h){
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(90, (float)w / (float)h,0.1, 100.0);
}

void keyboard(unsigned char c, int x, int y){
	
}
void display()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);

	glLoadIdentity();

	gluLookAt(0.0, -3.0, 0.0, 0.0, 0.0, -2, 0.0, 1.0,0.0);
	
	glColor4f(1.0f, 1.0f, 0.0f, 1.0f);
	glTranslatef(0.0f, 0.0f, -2.0f);
	glRotatef(angle, 0.0f, 1.0f, 0.0f);
	glutWireSphere(1, 50, 50);

	glColor4f(1.0f, 0.0f, 1.0f, 1.0f);
	glTranslatef(3.0f, 0.0f, 0.0f);
	glRotatef(angle+30, 0.0f, 1.0f, 0.0f);
	glutWireSphere(0.5, 50, 50);
	
	glColor4f(0.5f, 0.5f, 0.5f, 1.0f);
	glTranslatef(1.0f, 0.0f, 0.0f);
	glRotatef(angle + 60, 0.0f, 1.0f, 0.0f);
	glutWireSphere(0.25, 50, 50);

	angle += 0.5;
	if (angle >= 360.0) angle = 0.0f;

	glutSwapBuffers();

}
void initGL()
{
	//0.0 to 1.0 <=> 0 to 255. Depends on args of library
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClearDepth(1.0);
	glClearStencil(0);

	glEnable(GL_DEPTH_TEST);
	glEnable(GL_CULL_FACE);
}

void timerFunc(int val)
{
	display();
	glutTimerFunc(20, timerFunc, 0);
}

class BeforeMain{ static BOOL foo; };
BOOL BeforeMain::foo = ::ShowWindow(::GetConsoleWindow(), SW_HIDE);

int main(int argc, char **argv)
{
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA|GLUT_DEPTH | GLUT_STENCIL);
	glutInitWindowSize(500, 500);

	glutCreateWindow("HelloGL");
	
	glewInit();
	//if (GLEW_ARB_vertex_buffer_object)
	//{
	//	glGenBuffersARB();
	//}
	const GLubyte* version = glGetString(GL_VERSION);
	printf("%s", version);

	const GLubyte* extension = glGetString(GL_EXTENSIONS);
	printf("%s", extension);

	initGL();
	
	glutDisplayFunc(display);


	glutKeyboardFunc(keyboard);
	glutTimerFunc(20, timerFunc, 0);

	glutReshapeFunc(resize);
	glutMainLoop();

	return 0;
}




