#include <GL\freeglut.h>
#include <stdio.h>

float vertex[] = { 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f,
-1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, };

float vertex1[] = { 0.5f, 0.5f, -0.1f, 1.0f, 0.0f, 0.0f, 1.0f,
-0.5f, 0.5f, -0.1f, 0.0f, 1.0f, 0.0f, 1.0f,
-0.5f, -0.5f, -0.1f, 0.0f, 0.0f, 1.0f, 1.0f,
0.5f, -0.5f, -0.1f, 0.0f, 1.0f, 1.0f, 1.0f };

GLubyte indices[] = { 2, 1, 0 };
GLubyte indices1[] = { 0, 1, 2, 3 };



void drawTriangle() {
	printf("display");

	//enable sending position data of the vertex to the graphics pipeline
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);

	//tell opengl how the data is layed out in the array
	glVertexPointer(2, GL_FLOAT, 24, vertex);

	//tell opengl how color data is layed out
	glColorPointer(4, GL_FLOAT, 24, vertex + 2);

	//draw the primitive (this is the function which will trigger data transfer
	//	glDrawArrays(GL_TRIANGLES, 0, 3);
	glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_BYTE, indices);

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);
}
void drawQuad() {
	//enable sending position data of the vertex to the graphics pipeline
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);

	//tell opengl how the data is layed out in the array
	glVertexPointer(3, GL_FLOAT, 28, vertex1);

	//tell opengl how color data is layed out
	glColorPointer(4, GL_FLOAT, 28, vertex1 + 3);

	//draw the primitive (this is the function which will trigger data transfer
	//	glDrawArrays(GL_TRIANGLES, 0, 3);
	glDrawElements(GL_QUADS, 4, GL_UNSIGNED_BYTE, indices1);

	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);

}

void display() {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);


	drawTriangle();
	drawQuad();

	glutSwapBuffers();
}

void resize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 100.0);
}

void initGL() {
	//send the color_buffer clearing color
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClearDepth(1.0);
	glClearStencil(0.0);
}


void timerFunc(int val) {
	display();

	glutTimerFunc(20, timerFunc, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);

	glutInitWindowSize(500, 500);


	glutCreateWindow("HelloGL");

	const GLubyte* version = glGetString(GL_VERSION);
	printf("%s", version);

	//rendering context os created, can send opengl calls
	initGL();

	glutDisplayFunc(display);

	glutTimerFunc(20, timerFunc, 0);

	glutReshapeFunc(resize);
	//	glutIdleFunc(display);
	glutMainLoop();

	return 0;


}