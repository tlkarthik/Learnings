#include <GL/glew.h>
#include <GL\freeglut.h>
#include <stdio.h>
#include "ShaderHelper.h"
#include <glm.hpp>
#include <gtx\transform.hpp>

float vertex[] = { 1.0f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
0.0f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f,
-1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 1.0f, };

float vertex1[] = { 0.5f, 0.5f, -0.1f, 1.0f, 0.0f, 0.0f, 1.0f,
-0.5f, 0.5f, -0.1f, 0.0f, 1.0f, 0.0f, 1.0f,
-0.5f, -0.5f, -0.1f, 0.0f, 0.0f, 1.0f, 1.0f,
0.5f, -0.5f, -0.1f, 0.0f, 1.0f, 1.0f, 1.0f };

GLubyte indices[] = { 2, 1, 0 };
GLubyte indices1[] = { 0, 1, 2, 3 };

float angle = 0.0f, zpos=0.0f;
int positionIndex, colorIndex;
int modelMatrixIndex, projectionMatrixIndex, ViewMatrixIndex;
GLuint programObj;

void drawTriangle() {

	glEnableVertexAttribArray(positionIndex);
	glEnableVertexAttribArray(colorIndex);
	
	glVertexAttribPointer(positionIndex, 2, GL_FLOAT, false, 24, vertex);
	glVertexAttribPointer(colorIndex, 2, GL_FLOAT, false, 24, vertex+2);

	glDrawArrays(GL_TRIANGLES, 0, 3);

	glDisableVertexAttribArray(positionIndex);
	glDisableVertexAttribArray(colorIndex);
}
void drawQuad() {
	glEnableVertexAttribArray(positionIndex);
	glEnableVertexAttribArray(colorIndex);

	glVertexAttribPointer(positionIndex, 2, GL_FLOAT, false, 28, vertex1);
	glVertexAttribPointer(colorIndex, 2, GL_FLOAT, false, 28, vertex1 + 3);

	//glDrawArrays(GL_QUADS, 0, 4); //any of th
	glDrawElements(GL_QUADS, 4, GL_UNSIGNED_BYTE, indices1);

	glDisableVertexAttribArray(positionIndex);
	glDisableVertexAttribArray(colorIndex);
}

void display() {

	//projectionMatrix*ViewMatrix*modelMatrix * a_Position;      ORDER VVIMP. first model next projection
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

	angle += 0.05f;
	zpos += 0.05f;
	if (angle >= 360.0)angle = 0.0f;
	if (zpos >= 2.0)zpos = 0.0f;

	glm::mat4	 viewMatrix = glm::mat4();
	viewMatrix = glm::lookAt(glm::vec3(0.0f, 0.0f, zpos), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
	glUniformMatrix4fv(ViewMatrixIndex, 1, false, &viewMatrix[0][0]);

	glm::mat4	 modelMatrix = glm::mat4();
	//modelMatrix = glm::translate(glm::vec3(0.0f, 0.0f,-zpos));
	modelMatrix = glm::translate(modelMatrix,glm::vec3(-0.5f, 0.0f, 0.0f));
	//modelMatrix = glm::rotate(modelMatrix,angle, glm::vec3(0.0f, 1.0f, 0.0f));
	glUniformMatrix4fv(modelMatrixIndex, 1, false, &modelMatrix[0][0]);
	drawTriangle();
	
	modelMatrix = glm::mat4();
	//modelMatrix = glm::translate(glm::vec3(0.0f, 0.0f, -zpos));
	modelMatrix = glm::translate(modelMatrix,glm::vec3(0.5f, 0.0f, 0.0f));
	//modelMatrix = glm::rotate(modelMatrix,angle, glm::vec3(1.0f, 0.0f, 0.0f));
	glUniformMatrix4fv(modelMatrixIndex, 1, false, &modelMatrix[0][0]);

	drawQuad();
	//set a_position value
	glVertexAttrib4f(positionIndex, 0.0, 0.0, 0.0, 1.0);
	
	//glDrawArrays(GL_POINTS, 0, 0);
	glutSwapBuffers();
}

void resize(int w, int h) {
	glViewport(0, 0, w, h);
	glm::mat4 projectionMatrix = glm::perspective(90.0f, (float)w / (float)h, 0.1f, 100.0f);
	glUniformMatrix4fv(projectionMatrixIndex, 1,false, &projectionMatrix[0][0]);
}

void initGL() {
	//send the color_buffer clearing color
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClearDepth(1.0);
	glClearStencil(0);

	programObj = createProgram();
	if (programObj>0){
		glUseProgram(programObj);

		positionIndex = glGetAttribLocation(programObj, "a_Position");
		colorIndex = glGetAttribLocation(programObj, "a_Color");
		modelMatrixIndex = glGetUniformLocation(programObj, "modelMatrix");
		projectionMatrixIndex = glGetUniformLocation(programObj, "projectionMatrix");
		ViewMatrixIndex = glGetUniformLocation(programObj, "ViewMatrix");
		
	}
}


void timerFunc(int val) {
	display();

	
	glutTimerFunc(20, timerFunc, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);

	glutInitWindowSize(500, 500);


	glutCreateWindow("HelloGL");

	const GLubyte* version = glGetString(GL_VERSION);
	printf("%s", version);

	glewInit();
	//rendering context os created, can send opengl calls
	initGL();

	glutDisplayFunc(display);

	glutTimerFunc(20, timerFunc, 0);

	glutReshapeFunc(resize);
	//	glutIdleFunc(display);
	glutMainLoop();

	return 0;


}