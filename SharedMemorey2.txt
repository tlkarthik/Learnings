// SharedMemorey2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "SharedMemorey2.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// The one and only application object

CWinApp theApp;

using namespace std;

#include <windows.h>
#include <stdio.h>
#include <conio.h>
#include <tchar.h>
#pragma comment(lib, "user32.lib")

#define BUF_SIZE 256
#include <ppl.h>
using namespace Concurrency;
#include  <vector>
int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	
	HANDLE hMessageEmptiedEvent = CreateEvent(NULL, FALSE, FALSE, _T("MessageEmptied"));
	HANDLE hMessageSentEvent = CreateEvent(NULL, FALSE, FALSE, _T("MessageSent"));
	//HANDLE hMessageEmptiedEvent = OpenEvent(EVENT_ALL_ACCESS, FALSE, _T("MessageEmptied")); //This is to get notify from sender that data has put
	//HANDLE hMessageSentEvent = OpenEvent(EVENT_ALL_ACCESS, FALSE, _T("MessageSent")); //this is to notify sender that receiver is ready to listen data.

	WaitForSingleObject(hMessageSentEvent, INFINITE);
	TCHAR szName[] = TEXT("Local\\MyFileMappingObject");
	HANDLE hMapFile;
	LPCTSTR pBuf;

	hMapFile = OpenFileMapping(
		FILE_MAP_ALL_ACCESS,   // read/write access
		FALSE,                 // do not inherit the name
		szName);               // name of mapping object

	if (hMapFile == NULL)
	{
		_tprintf(TEXT("Could not open file mapping object (%d).\n"),
			GetLastError());
		return 1;
	}

	pBuf = (LPTSTR)MapViewOfFile(hMapFile, // handle to map object
		FILE_MAP_ALL_ACCESS,  // read/write permission
		0,
		0,
		BUF_SIZE);

	if (pBuf == NULL)
	{
		_tprintf(TEXT("Could not map view of file (%d).\n"),
			GetLastError());

		CloseHandle(hMapFile);

		return 1;
	}

	//WaitForSingleObject(hMessageSentEvent, INFINITE);
	// Copy the data from the shared buffer
	MessageBox(NULL, pBuf, TEXT("Process2"), MB_OK);
	// Signal the other process that message has been read.
	SetEvent(hMessageEmptiedEvent);

	UnmapViewOfFile(pBuf);

	CloseHandle(hMapFile);
	
	
	//Concurrency::parallel_for_each(start_iterator, end_iterator, function_object);


	return 0;
}
