// StringPatternSearch.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include<stdlib.h>
#include<stdio.h>
#define NO_OF_CHARS 256

int *getCharCountArray(char *str)
{
	int *count = (int *)calloc(sizeof(int), NO_OF_CHARS);
	int i;
	for (i = 0; *(str + i); i++)
	{
		auto e = *(str + i);
		count[*(str + i)]++;
	}

	printf("dfd %d", count);
	return count;
}

/* The function returns index of first non-repeating
character in a string. If all characters are repeating
then returns -1 */
int firstNonRepeating(char *str)
{
	int *count = getCharCountArray(str);
	int index = -1, i;
	int t = 0;
	/*while (*(str + t) != '\0')
	{
		if (*(str + t) == 1)
			printf("junnk %d ", t);
		t++;
	}*/
	for (i = 0; *(str + i); i++)
	{
		if (count[*(str + i)] == 1)
		{
			index = i;
			break;
		}
	}

	free(count); // To avoid memory leak
	return index;
}


void search(char *pat, char *txt)
{
	int M = strlen(pat);
	int N = strlen(txt);

	/* A loop to slide pat[] one by one */
	for (int i = 0; i <= N - M; i++)
	{
		int j;

		/* For current index i, check for pattern match */
		for (j = 0; j < M; j++)
		{
			if (txt[i + j] != pat[j])
			{
				break;
			}
		}

		if (j == M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
		{
			printf("Pattern found at index %d \n", i);
		}
	}
}

/* Driver program to test above function */
int main()
{
	char str[] = "geeksforgeeks";
	char txt[] = "AABAACAADAABAAABAA";
	char pat[] = "AABA";

	auto size = *(&txt + 1) - txt;
	search(pat, txt);
	int index = firstNonRepeating(str);
	if (index == -1)
		printf("Either all characters are repeating or string is empty");
	else
		printf("First non-repeating character is %c", str[index]);
	getchar();
	return 0;
}