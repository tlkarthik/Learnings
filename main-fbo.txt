#include <GL\glew.h>
#include <GL\freeglut.h>
#include <stdio.h>
#include <math.h>

float angle = 0.0f;
float scale = 1.0;
float zPos = 0.0f;

float quad[] = { -0.5f, 0.5f, 1.0f, 1.0f,
-0.5f, 0.5f, 0.0f, 1.0f,
-0.5f, -0.5f, 0.0f, 0.0f,
0.5f, -0.5f, 1.0f, 0.0f };

int onScreenFBOID, offScreenFBOID;
GLuint textureID;


void drawQuad(){
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();


	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, textureID);

	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	glVertexPointer(2, GL_FLOAT, 16, quad);
	glTexCoordPointer(2, GL_FLOAT, 16, quad+2);

	glDrawArrays(GL_QUADS, 0, 4);


	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glBindTexture(GL_TEXTURE_2D, 0);
	glDisable(GL_TEXTURE_2D);

}
void drawCube() {
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(90, 1, 0.1, 100.0);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glPushMatrix();
	glTranslatef(0.0f, 0.0f, -4.0);
	glRotatef(angle, 0.0, 1.0, 0.0f);
	glBegin(GL_QUADS);                // Begin drawing the color cube with 6 quads
	// Top face (y = 1.0f)
	// Define vertices in counter-clockwise (CCW) order with normal pointing out
	glColor3f(0.0f, 1.0f, 0.0f);     // Green
	glVertex3f(1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, 1.0f);
	glVertex3f(1.0f, 1.0f, 1.0f);

	// Bottom face (y = -1.0f)
	glColor3f(1.0f, 0.5f, 0.0f);     // Orange
	glVertex3f(1.0f, -1.0f, 1.0f);
	glVertex3f(-1.0f, -1.0f, 1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(1.0f, -1.0f, -1.0f);

	// Front face  (z = 1.0f)
	glColor3f(1.0f, 0.0f, 0.0f);     // Red
	glVertex3f(1.0f, 1.0f, 1.0f);
	glVertex3f(-1.0f, 1.0f, 1.0f);
	glVertex3f(-1.0f, -1.0f, 1.0f);
	glVertex3f(1.0f, -1.0f, 1.0f);

	// Back face (z = -1.0f)
	glColor3f(1.0f, 1.0f, 0.0f);     // Yellow
	glVertex3f(1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, -1.0f);
	glVertex3f(1.0f, 1.0f, -1.0f);

	// Left face (x = -1.0f)
	glColor3f(0.0f, 0.0f, 1.0f);     // Blue
	glVertex3f(-1.0f, 1.0f, 1.0f);
	glVertex3f(-1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, 1.0f);

	// Right face (x = 1.0f)
	glColor3f(1.0f, 0.0f, 1.0f);     // Magenta
	glVertex3f(1.0f, 1.0f, -1.0f);
	glVertex3f(1.0f, 1.0f, 1.0f);
	glVertex3f(1.0f, -1.0f, 1.0f);
	glVertex3f(1.0f, -1.0f, -1.0f);
	glEnd();  // End of drawing color-cube
	glPopMatrix();

}

int initFBO(int w, int h)
{
	glEnable(GL_TEXTURE_2D);
	glGetIntegerv(GL_FRAMEBUFFER_BINDING, &onScreenFBOID);

	GLuint id;

	glGenFramebuffers(1, &id);
	// bind to frame buffer
	glBindFramebuffer(GL_FRAMEBUFFER, id);

	// create texture obj that will be attached to offFBO as color attachment
	glGenTextures(1, &textureID);
	glBindTexture(GL_TEXTURE_2D, textureID);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, w, h, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, textureID, 0);

	// unbind from texture obj
	glBindTexture(GL_TEXTURE_2D, 0);


	// create render buffer obj that will be attached to offFBO as depth attachment
	GLuint rboID;
	glGenRenderbuffers(1, &rboID);
	glBindRenderbuffer(GL_RENDERBUFFER, rboID);
	glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16, w, h);
	// attach to depth attachment point for FBO
	glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, rboID);

	// unbind
	glBindRenderbuffer(GL_RENDERBUFFER, 0);

	glDisable(GL_TEXTURE_2D);
	int status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
	if (status == GL_FRAMEBUFFER_COMPLETE)
	{
		printf("FBO initialized succesfully\n");

		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glViewport(0, 0, 1024, 1024);
		drawCube();

		glFlush();
		// bind back to onscreen FBO
		glBindFramebuffer(GL_FRAMEBUFFER, onScreenFBOID);
		return id;
	}
	else {
		// bind back to onscreen FBO
		glBindFramebuffer(GL_FRAMEBUFFER, onScreenFBOID);
		return -1;
	}
}

void keyboard(unsigned char c, int x, int y) {
}


void display() {

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);

	glViewport(250, 250, 250, 520);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();


	angle += 0.5f;
	if (angle >= 360.0) angle = 0.0f;
	scale += 0.001f;
	if (scale >= 2.0) scale = 1.0f;
	zPos += 0.01;

	drawCube();
	glViewport(0, 0, 250, 520);
	drawQuad();

	glutSwapBuffers();
}

void resize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(90, (float)w / (float)h, 0.1, 100.0);

}

void initGL() {
	//send the color_buffer clearing color
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glClearDepth(1.0);
	glClearStencil(0);

	glEnable(GL_DEPTH_TEST);

	initFBO(100, 100);
}


void timerFunc(int val) {
	display();

	glutTimerFunc(20, timerFunc, 0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);

	glutInitDisplayMode(GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);

	glutInitWindowSize(500, 500);
	glutCreateWindow("HelloGL");

	//initialize the glew library
	glewInit();

	//rendering context os created, can send opengl calls
	initGL();

	glutDisplayFunc(display);

	glutKeyboardFunc(keyboard);
	glutTimerFunc(20, timerFunc, 0);

	glutReshapeFunc(resize);
	glutMainLoop();

	return 0;


}